#!/usr/bin/env python3

# vi: ft=python

import functools
import os
import github
import json
import semver
import subprocess

def read_versions():
    with open("versions.json", "r") as f:
        return json.load(f)

current_versions = read_versions()

def is_stable(release):
    version = release.tag_name.removeprefix("v")
    return semver.compare(version, "1.5.6") >= 0 and not (release.draft or release.prerelease)

def by_version(release):
    return release.tag_name.removeprefix("v").split(".")

def to_version(versions, release):
    version = release.tag_name.removeprefix("v")
    calculated_hash = calculate_hash(version)
    versions[version] = {
        "hash": calculated_hash,
        "vendorHash": calculate_vendor_hash(version, calculated_hash)
    }
    return versions

def calculate_hash(version):
    current_hash = current_versions.get(version, {}).get("hash")
    if current_hash:
        print(f"Using existing hash for {version}")
        return current_hash
    else:
        print(f"Calculating hash for {version}")
        return nix_prefetch([
            "fetchFromGitHub",
            "--owner",
            "hashicorp",
            "--repo",
            "terraform",
            "--rev",
            f"v{version}"
        ])

def calculate_vendor_hash(version, calculated_hash):
    current_vendor_hash = current_versions.get(version, {}).get("vendorHash")
    if current_vendor_hash:
        print(f"Using existing vendorHash for {version}")
        return current_vendor_hash
    else:
        print(f"Calculating vendorHash for {version}")
        return nix_prefetch([
            "--file",
            "./vendor_hash.nix",
            "--argstr",
            "version",
            version,
            "--argstr",
            "hash",
            calculated_hash
        ])

def nix_prefetch(args):
    return subprocess.check_output([
        "nix-prefetch",
        "--silent",
        "--option",
        "extra-experimental-features",
        "flakes",
    ] + args, text=True).strip()


auth = github.Auth.Token(os.environ["GITHUB_TOKEN"])
g = github.Github(auth=auth)
repo = g.get_repo("hashicorp/terraform")
# TODO: Drop "v" prefix first
releases = list(filter(is_stable, repo.get_releases().get_page(0)))
releases.sort(reverse=True,key=by_version)
versions = functools.reduce(to_version, releases, {})
with open("versions.json", "w") as f:
    json.dump(versions, f, indent=2)

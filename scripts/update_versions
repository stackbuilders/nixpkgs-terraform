#!/usr/bin/env python3

# vi: ft=python

import functools
import os
import github
import json
import semver
import subprocess

def read_versions():
    with open("versions.json") as f:
        return json.load(f)

current_versions = read_versions().keys()

def is_stable(release):
    version = release.tag_name.removeprefix("v")
    return semver.compare(version, "1.5.0") >= 0 and not (release.draft or release.prerelease)

def by_version(release):
    return release.tag_name.removeprefix("v").split(".")

def to_version(versions, release):
    version = release.tag_name.removeprefix("v")
    print(f"Calculating hash for {version}")
    calculated_hash = subprocess.check_output([
        "nix-prefetch",
        "fetchFromGitHub",
        "--silent",
        "--option",
        "extra-experimental-features",
        "--owner",
        "hashicorp",
        "--repo",
        "terraform",
        "--rev",
        release.title
    ]).decode("utf-8")
    print(f"Calculating vendorHash for {version}")
    calculated_vendor_hash = subprocess.check_output([
        "nix-prefetch",
        "--silent",
        "--option",
        "extra-experimental-features",
        "flakes",
        "--file",
        "../vendor_hash.nix",
        "--argstr",
        "version",
        version,
        "--argstr",
        "hash",
        calculated_hash
    ]).decode("utf-8")
    versions[version] = {
        "hash": calculated_hash,
        "vendorHash": calculated_vendor_hash
    }
    return versions

auth = github.Auth.Token(os.environ["GITHUB_TOKEN"])
g = github.Github(auth=auth)
repo = g.get_repo("hashicorp/terraform")
releases = list(filter(is_stable, repo.get_releases()))
releases.sort(reverse=True,key=by_version)
versions = functools.reduce(to_version, releases, {})
print(versions)
